# metastore-pg/templates/postgres-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: metastore-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: {{ .Values.containers.name }}
        image: {{ .Values.containers.image }}   
        ports:
        - containerPort: {{ .Values.containers.containerPort }}
        env:
        - name: POSTGRES_DB  
          valueFrom:    
            configMapKeyRef:      
              name: postgres-config      
              key: POSTGRES_DB
        - name: POSTGRES_USER  
          valueFrom:    
            configMapKeyRef:      
              name: postgres-config      
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD  
          valueFrom:    
            configMapKeyRef:      
              name: postgres-config      
              key: POSTGRES_PASSWORD
        - name: PGDATA  
          value: "/var/lib/postgresql/data/pgdata"
        
        # Запускаем дополнительные SQL-команды для создания таблиц
        lifecycle:
          postStart:
            exec:
              command: ['sh', '-c', 'psql -h localhost -U "$POSTGRES_USER" -d "$POSTGRES_DB" <<-EOSQL
                CREATE TABLE IF NOT EXISTS iceberg_namespace_properties (
                  catalog_name VARCHAR(255) NOT NULL,
                  namespace VARCHAR(255) NOT NULL,
                  property_key VARCHAR(5500),
                  property_value VARCHAR(5500),
                  PRIMARY KEY (catalog_name, namespace, property_key)
                );
                
                CREATE TABLE IF NOT EXISTS iceberg_tables (
                  catalog_name VARCHAR(255) NOT NULL,
                  table_namespace VARCHAR(255) NOT NULL,
                  table_name VARCHAR(255) NOT NULL,
                  metadata_location VARCHAR(5500),
                  previous_metadata_location VARCHAR(5500),
                  PRIMARY KEY (catalog_name, table_namespace, table_name)
                );
                EOSQL']

        volumeMounts:
        - name: {{ .Values.containers.volumeMounts.name }}
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: {{ .Values.containers.volumeMounts.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.claimName }}