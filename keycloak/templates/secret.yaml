{{- if not .Values.keycloak.existingSecret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "keycloak.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
  {{- with (include "keycloak.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  admin-password: {{ (.Values.keycloak.adminPassword | default (randAlphaNum 32)) | b64enc | quote }}
{{- end }}
---
{{- if and (not .Values.database.existingSecret) (or (eq .Values.database.type "postgres") (eq .Values.database.type "mysql") (eq .Values.database.type "mariadb")) }}
{{- if and (eq .Values.database.type "postgres") .Values.postgres.enabled }}
{{- /* Use the existing postgres password when postgres is enabled */}}
{{- $existingPostgresSecret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-postgres" .Release.Name)) }}
{{- $postgresPassword := "" }}
{{- if and $existingPostgresSecret $existingPostgresSecret.data }}
  {{- $postgresPassword = index $existingPostgresSecret.data "postgres-password" }}
{{- else }}
  {{- $postgresPassword = (.Values.postgres.auth.password | default (randAlphaNum 32) | b64enc) }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-db" (include "keycloak.fullname" .) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
  {{- with (include "keycloak.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  db-username: {{ (default "postgres" .Values.postgres.auth.username) | b64enc | quote }}
  db-password: {{ $postgresPassword | quote }}
{{- else if and (or (eq .Values.database.type "mysql") (eq .Values.database.type "mariadb")) .Values.mariadb.enabled }}
{{- /* Use the existing mariadb password when mariadb is enabled */}}
{{- $existingMariadbSecret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-mariadb" .Release.Name)) }}
{{- $mariadbPassword := "" }}
{{- $mariadbPasswordKey := "" }}
{{- if .Values.mariadb.auth.username }}
  {{- $mariadbPasswordKey = .Values.mariadb.auth.secretKeys.userPasswordKey }}
  {{- if and $existingMariadbSecret $existingMariadbSecret.data }}
    {{- $mariadbPassword = index $existingMariadbSecret.data $mariadbPasswordKey }}
  {{- else }}
    {{- $mariadbPassword = (.Values.mariadb.auth.password | default (randAlphaNum 32) | b64enc) }}
  {{- end }}
{{- else }}
  {{- $mariadbPasswordKey = .Values.mariadb.auth.secretKeys.rootPasswordKey }}
  {{- if and $existingMariadbSecret $existingMariadbSecret.data }}
    {{- $mariadbPassword = index $existingMariadbSecret.data $mariadbPasswordKey }}
  {{- else }}
    {{- $mariadbPassword = (.Values.mariadb.auth.rootPassword | default (randAlphaNum 32) | b64enc) }}
  {{- end }}
{{- end }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-db" (include "keycloak.fullname" .) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
  {{- with (include "keycloak.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  db-username: {{ (default "root" .Values.mariadb.auth.username) | b64enc | quote }}
  db-password: {{ $mariadbPassword | quote }}
{{- else }}
{{- /* Fallback for external databases */}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-db" (include "keycloak.fullname" .) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
  {{- with (include "keycloak.annotations" .) }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
type: Opaque
data:
  db-username: {{ .Values.database.username | b64enc | quote }}
  db-password: {{ (.Values.database.password | default (randAlphaNum 32)) | b64enc | quote }}
{{- end }}
{{- end }}