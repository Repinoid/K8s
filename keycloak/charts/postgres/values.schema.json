{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "PostgreSQL Helm Chart Values Schema",
  "description": "Schema for PostgreSQL Helm chart values",
  "properties": {
    "global": {
      "type": "object",
      "title": "Global Parameters",
      "description": "Global Docker image parameters",
      "properties": {
        "imageRegistry": {
          "type": "string",
          "title": "Global Docker Image Registry",
          "description": "Global Docker Image registry"
        },
        "imagePullSecrets": {
          "type": "array",
          "items": {
            "type": ["string", "object"],
            "properties": {
              "name": { "type": "string" }
            },
            "required": ["name"]
          }
        }
      }
    },
    "image": {
      "type": "object",
      "title": "PostgreSQL Image Configuration",
      "description": "PostgreSQL container image configuration",
      "properties": {
        "registry": {
          "type": "string",
          "title": "PostgreSQL Image Registry",
          "description": "PostgreSQL image registry"
        },
        "repository": {
          "type": "string",
          "title": "PostgreSQL Image Repository",
          "description": "PostgreSQL image repository"
        },
        "tag": {
          "type": "string",
          "title": "PostgreSQL Image Tag",
          "description": "PostgreSQL image tag with digest"
        },
        "imagePullPolicy": {
          "type": "string",
          "title": "PostgreSQL Image Pull Policy",
          "description": "PostgreSQL image pull policy",
          "enum": ["Always", "Never", "IfNotPresent"]
        }
      }
    },
    "replicaCount": {
      "type": "integer",
      "title": "Replica Count",
      "description": "Number of PostgreSQL replicas to deploy (Note: PostgreSQL doesn't support multi-master replication by default)",
      "minimum": 1
    },
    "nameOverride": {
      "type": "string",
      "title": "Name Override",
      "description": "String to partially override postgres.fullname"
    },
    "fullnameOverride": {
      "type": "string",
      "title": "Full Name Override",
      "description": "String to fully override postgres.fullname"
    },
    "commonLabels": {
      "type": "object",
      "title": "Common Labels",
      "description": "Labels to add to all deployed objects",
      "additionalProperties": {
        "type": "string"
      }
    },
    "commonAnnotations": {
      "type": "object",
      "title": "Common Annotations",
      "description": "Annotations to add to all deployed objects",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podAnnotations": {
      "type": "object",
      "title": "Pod Annotations",
      "description": "Map of annotations to add to the pods",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podLabels": {
      "type": "object",
      "title": "Pod Labels",
      "description": "Map of labels to add to the pods",
      "additionalProperties": {
        "type": "string"
      }
    },
    "podSecurityContext": {
      "type": "object",
      "title": "Pod Security Context",
      "description": "Security Context configuration",
      "properties": {
        "fsGroup": {
          "type": "integer",
          "title": "FS Group",
          "description": "Group ID for the volumes of the pod",
          "minimum": 0
        }
      }
    },
    "containerSecurityContext": {
      "type": "object",
      "title": "Security Context",
      "description": "Container security context",
      "properties": {
        "allowPrivilegeEscalation": {
          "type": "boolean",
          "title": "Allow Privilege Escalation",
          "description": "Enable container privilege escalation"
        },
        "runAsNonRoot": {
          "type": "boolean",
          "title": "Run As Non-Root",
          "description": "Configure the container to run as a non-root user"
        },
        "runAsUser": {
          "type": "integer",
          "title": "Run As User",
          "description": "User ID for the PostgreSQL container",
          "minimum": 0
        },
        "runAsGroup": {
          "type": "integer",
          "title": "Run As Group",
          "description": "Group ID for the PostgreSQL container",
          "minimum": 0
        },
        "readOnlyRootFilesystem": {
          "type": "boolean",
          "title": "Read-Only Root Filesystem",
          "description": "Mount container root filesystem as read-only"
        },
        "capabilities": {
          "type": "object",
          "title": "Capabilities",
          "description": "Linux capabilities configuration",
          "properties": {
            "drop": {
              "type": "array",
              "title": "Drop Capabilities",
              "description": "Linux capabilities to be dropped",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "auth": {
      "type": "object",
      "title": "PostgreSQL Authentication",
      "description": "PostgreSQL Authentication configuration",
      "properties": {
        "username": {
          "type": "string",
          "title": "Custom Username",
          "description": "Name for a custom user to create"
        },
        "password": {
          "type": "string",
          "title": "Custom Password",
          "description": "Password for the custom user to create"
        },
        "database": {
          "type": "string",
          "title": "Custom Database",
          "description": "Name for a custom database to create"
        },
        "existingSecret": {
          "type": "string",
          "title": "Existing Secret",
          "description": "Name of existing secret to use for PostgreSQL credentials"
        },
        "secretKeys": {
          "type": "object",
          "title": "Secret Keys",
          "description": "Keys in existing secret",
          "properties": {
            "passwordKey": {
              "type": "string",
              "title": "Postgres Password Key",
              "description": "Name of key in existing secret to use for PostgreSQL credentials"
            }
          }
        }
      }
    },
    "config": {
      "type": "object",
      "title": "PostgreSQL Configuration",
      "description": "PostgreSQL Configuration parameters",
      "properties": {
        "postgresqlSharedPreloadLibraries": {
          "type": "string",
          "title": "Shared Preload Libraries",
          "description": "Shared preload libraries (comma-separated list)"
        },
        "postgresqlMaxConnections": {
          "type": "integer",
          "title": "Max Connections",
          "description": "Maximum number of connections",
          "minimum": 1
        },
        "postgresqlSharedBuffers": {
          "type": "string",
          "title": "Shared Buffers",
          "description": "Amount of memory the database server uses for shared memory buffers"
        },
        "postgresqlEffectiveCacheSize": {
          "type": "string",
          "title": "Effective Cache Size",
          "description": "Effective cache size"
        },
        "postgresqlWorkMem": {
          "type": "string",
          "title": "Work Memory",
          "description": "Amount of memory to be used by internal sort operations and hash tables"
        },
        "postgresqlMaintenanceWorkMem": {
          "type": "string",
          "title": "Maintenance Work Memory",
          "description": "Maximum amount of memory to be used by maintenance operations"
        },
        "postgresqlWalBuffers": {
          "type": "string",
          "title": "WAL Buffers",
          "description": "Amount of memory used in shared memory for WAL data"
        },
        "postgresqlCheckpointCompletionTarget": {
          "type": "string",
          "title": "Checkpoint Completion Target",
          "description": "Time spent flushing dirty buffers during checkpoint, as fraction of checkpoint interval"
        },
        "postgresqlRandomPageCost": {
          "type": "string",
          "title": "Random Page Cost",
          "description": "Sets the planner's estimate of the cost of a non-sequentially-fetched disk page"
        },
        "postgresqlLogStatement": {
          "type": "string",
          "title": "Log Statement",
          "description": "Sets the type of statements logged"
        },
        "postgresqlLogMinDurationStatement": {
          "type": "string",
          "title": "Log Min Duration Statement",
          "description": "Sets the minimum execution time above which statements will be logged"
        },
        "extraConfig": {
          "type": "array",
          "title": "Extra Configuration",
          "description": "Additional PostgreSQL configuration parameters",
          "items": {
            "type": "string"
          }
        },
        "existingConfigmap": {
          "type": "string",
          "title": "Existing ConfigMap",
          "description": "Name of existing ConfigMap with PostgreSQL configuration"
        }
      }
    },
    "initdb": {
      "type": "object",
      "title": "PostgreSQL Initdb Configuration",
      "description": "PostgreSQL Initdb Configuration parameters",
      "properties": {
        "args": {
          "type": "string",
          "title": "Initdb Arguments",
          "description": "Send arguments to postgres initdb. This is a space separated string of arguments"
        },
        "scripts": {
          "type": "object",
          "title": "Initdb Scripts",
          "description": "Dictionary of scripts to be run at first boot",
          "additionalProperties": {
            "type": "string"
          }
        },
        "scriptsConfigMap": {
          "type": "string",
          "title": "Initdb Scripts ConfigMap",
          "description": "ConfigMap with scripts to be run at first boot"
        },
        "directory": {
          "type": "string",
          "title": "Initdb Scripts directory mount path",
          "description": "Directory where init scripts are mounted into the container"
        }
      }
    },
    "service": {
      "type": "object",
      "title": "Service Configuration",
      "description": "Service configuration parameters",
      "properties": {
        "type": {
          "type": "string",
          "title": "Service Type",
          "description": "PostgreSQL service type",
          "enum": ["ClusterIP", "NodePort", "LoadBalancer", "ExternalName"]
        },
        "port": {
          "type": "integer",
          "title": "Service Port",
          "description": "PostgreSQL service port",
          "minimum": 1,
          "maximum": 65535
        },
        "targetPort": {
          "type": "integer",
          "title": "Target Port",
          "description": "PostgreSQL container port",
          "minimum": 1,
          "maximum": 65535
        },
        "annotations": {
          "type": "object",
          "title": "Service Annotations",
          "description": "Service annotations",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ingress": {
      "type": "object",
      "title": "Ingress Configuration",
      "description": "Ingress configuration parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Ingress",
          "description": "Enable ingress record generation for PostgreSQL"
        },
        "className": {
          "type": "string",
          "title": "Ingress Class Name",
          "description": "IngressClass that will be used to implement the Ingress"
        },
        "annotations": {
          "type": "object",
          "title": "Ingress Annotations",
          "description": "Additional annotations for the Ingress resource",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hosts": {
          "type": "array",
          "title": "Ingress Hosts",
          "description": "Ingress hosts configuration",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string",
                "title": "Host",
                "description": "Hostname for PostgreSQL ingress"
              },
              "paths": {
                "type": "array",
                "title": "Paths",
                "description": "Paths configuration for the host",
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "title": "Path",
                      "description": "Path for PostgreSQL ingress"
                    },
                    "pathType": {
                      "type": "string",
                      "title": "Path Type",
                      "description": "Path type for PostgreSQL ingress",
                      "enum": ["Exact", "Prefix", "ImplementationSpecific"]
                    }
                  }
                }
              }
            }
          }
        },
        "tls": {
          "type": "array",
          "title": "TLS Configuration",
          "description": "TLS configuration for PostgreSQL ingress",
          "items": {
            "type": "object",
            "properties": {
              "secretName": {
                "type": "string",
                "title": "Secret Name",
                "description": "Name of the secret containing TLS certificates"
              },
              "hosts": {
                "type": "array",
                "title": "TLS Hosts",
                "description": "List of hosts covered by the TLS certificate",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "resources": {
      "type": "object",
      "title": "Resource Configuration",
      "description": "Resource configuration parameters",
      "properties": {
        "limits": {
          "type": "object",
          "title": "Resource Limits",
          "description": "Resource limits for the container",
          "properties": {
            "cpu": {
              "oneOf": [{ "type": "string" }, { "type": "number" }],
              "title": "CPU Limit",
              "description": "CPU resource limit"
            },
            "memory": {
              "type": "string",
              "title": "Memory Limit",
              "description": "Memory resource limit"
            }
          }
        },
        "requests": {
          "type": "object",
          "title": "Resource Requests",
          "description": "Resource requests for the container",
          "properties": {
            "cpu": {
              "oneOf": [{ "type": "string" }, { "type": "number" }],
              "title": "CPU Request",
              "description": "CPU resource request"
            },
            "memory": {
              "type": "string",
              "title": "Memory Request",
              "description": "Memory resource request"
            }
          }
        }
      }
    },
    "persistence": {
      "type": "object",
      "title": "Persistence Configuration",
      "description": "Persistence configuration parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Persistence",
          "description": "Enable persistence using Persistent Volume Claims"
        },
        "storageClass": {
          "type": "string",
          "title": "Storage Class",
          "description": "Persistent Volume storage class"
        },
        "annotations": {
          "type": "object",
          "title": "PVC Annotations",
          "description": "Persistent Volume Claim annotations",
          "additionalProperties": {
            "type": "string"
          }
        },
        "size": {
          "type": "string",
          "title": "Storage Size",
          "description": "Persistent Volume size",
          "pattern": "^\\d+(Ei|Pi|Ti|Gi|Mi|Ki|E|P|T|G|M|K)?$"
        },
        "accessModes": {
          "type": "array",
          "title": "Access Modes",
          "description": "Persistent Volume access modes",
          "items": {
            "type": "string",
            "enum": [
              "ReadWriteOnce",
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOncePod"
            ]
          }
        },
        "existingClaim": {
          "type": "string",
          "title": "Existing Claim",
          "description": "The name of an existing PVC to use for persistence"
        }
      }
    },
    "persistentVolumeClaimRetentionPolicy": {
      "type": "object",
      "title": "Persistent Volume Claim Retention Policy Configuration",
      "description": "Persistent Volume Claim Retention Policy configuration parameters",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Persistent volume retention policy",
          "description": "Enable Persistent volume retention policy for the Statefulset"
        },
        "whenDeleted": {
          "type": "string",
          "title": "whenDeleted Volume retention behavior",
          "description": "Volume retention behavior that applies when the StatefulSet is deleted",
          "enum": ["Delete", "Retain"]
        },
        "whenScaled": {
          "type": "string",
          "title": "whenScaled Volume retention behavior",
          "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
          "enum": ["Delete", "Retain"]
        }
      }
    },
    "livenessProbe": {
      "type": "object",
      "title": "Liveness Probe Configuration",
      "description": "Liveness and readiness probes configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Liveness Probe",
          "description": "Enable livenessProbe on PostgreSQL containers"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "title": "Initial Delay Seconds",
          "description": "Initial delay seconds for livenessProbe",
          "minimum": 0
        },
        "periodSeconds": {
          "type": "integer",
          "title": "Period Seconds",
          "description": "Period seconds for livenessProbe",
          "minimum": 1
        },
        "timeoutSeconds": {
          "type": "integer",
          "title": "Timeout Seconds",
          "description": "Timeout seconds for livenessProbe",
          "minimum": 1
        },
        "failureThreshold": {
          "type": "integer",
          "title": "Failure Threshold",
          "description": "Failure threshold for livenessProbe",
          "minimum": 1
        },
        "successThreshold": {
          "type": "integer",
          "title": "Success Threshold",
          "description": "Success threshold for livenessProbe",
          "minimum": 1
        }
      }
    },
    "readinessProbe": {
      "type": "object",
      "title": "Readiness Probe Configuration",
      "description": "Readiness probe configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Readiness Probe",
          "description": "Enable readinessProbe on PostgreSQL containers"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "title": "Initial Delay Seconds",
          "description": "Initial delay seconds for readinessProbe",
          "minimum": 0
        },
        "periodSeconds": {
          "type": "integer",
          "title": "Period Seconds",
          "description": "Period seconds for readinessProbe",
          "minimum": 1
        },
        "timeoutSeconds": {
          "type": "integer",
          "title": "Timeout Seconds",
          "description": "Timeout seconds for readinessProbe",
          "minimum": 1
        },
        "failureThreshold": {
          "type": "integer",
          "title": "Failure Threshold",
          "description": "Failure threshold for readinessProbe",
          "minimum": 1
        },
        "successThreshold": {
          "type": "integer",
          "title": "Success Threshold",
          "description": "Success threshold for readinessProbe",
          "minimum": 1
        }
      }
    },
    "startupProbe": {
      "type": "object",
      "title": "Startup Probe Configuration",
      "description": "Startup probe configuration",
      "properties": {
        "enabled": {
          "type": "boolean",
          "title": "Enable Startup Probe",
          "description": "Enable startupProbe on PostgreSQL containers"
        },
        "initialDelaySeconds": {
          "type": "integer",
          "title": "Initial Delay Seconds",
          "description": "Initial delay seconds for startupProbe",
          "minimum": 0
        },
        "periodSeconds": {
          "type": "integer",
          "title": "Period Seconds",
          "description": "Period seconds for startupProbe",
          "minimum": 1
        },
        "timeoutSeconds": {
          "type": "integer",
          "title": "Timeout Seconds",
          "description": "Timeout seconds for startupProbe",
          "minimum": 1
        },
        "failureThreshold": {
          "type": "integer",
          "title": "Failure Threshold",
          "description": "Failure threshold for startupProbe",
          "minimum": 1
        },
        "successThreshold": {
          "type": "integer",
          "title": "Success Threshold",
          "description": "Success threshold for startupProbe",
          "minimum": 1
        }
      }
    },
    "nodeSelector": {
      "type": "object",
      "title": "Node Selector",
      "description": "Node labels for pod assignment",
      "additionalProperties": {
        "type": "string"
      }
    },
    "tolerations": {
      "type": "array",
      "title": "Tolerations",
      "description": "Toleration labels for pod assignment",
      "items": {
        "type": "object"
      }
    },
    "affinity": {
      "type": "object",
      "title": "Affinity Configuration",
      "description": "Affinity settings for pod assignment"
    },
    "serviceAccount": {
      "type": "object",
      "title": "Service Account Configuration",
      "description": "Service account configuration",
      "properties": {
        "create": {
          "type": "boolean",
          "title": "Create Service Account",
          "description": "Specifies whether a service account should be created"
        },
        "annotations": {
          "type": "object",
          "title": "Service Account Annotations",
          "description": "Annotations to add to the service account",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string",
          "title": "Service Account Name",
          "description": "The name of the service account to use. If not set and create is true, a name is generated using the `fullname` template."
        },
        "automountServiceAccountToken": {
          "type": "boolean",
          "title": "Automount Service Account Token",
          "description": "Whether to automount the service account token inside the pod"
        }
      }
    },
    "extraEnv": {
      "type": "object",
      "title": "Extra Environment",
      "description": "Additional environment variables from key-value pairs",
      "additionalProperties": {
        "type": "string"
      }
    },
    "extraEnvVarsSecret": {
      "type": "string",
      "title": "Extra Environment Secret",
      "description": "Name of an existing Secret containing additional environment variables"
    },
    "initContainers": {
      "type": "array",
      "title": "Init Containers",
      "description": "Init containers to add to the PostgreSQL pods. Useful for tasks like pgautoupgrade for major version upgrades",
      "items": {
        "type": "object",
        "description": "A Kubernetes init container specification. All fields are allowed."
      }
    },
    "extraObjects": {
      "type": "array",
      "title": "Extra Objects",
      "description": "A list of additional Kubernetes objects to deploy alongside the release. Helm templating is supported in any field, but all template expressions must be quoted. Each item should be a valid Kubernetes manifest object.",
      "items": {
        "type": "object",
        "description": "A Kubernetes manifest object. All fields are allowed."
      }
    }
  }
}
